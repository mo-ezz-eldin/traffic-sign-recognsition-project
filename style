
import streamlit as st


def apply_custom_css():
    """Apply custom CSS styling to the Streamlit app"""
    st.markdown("""
    <style>
    
        .main {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .title-container {
            text-align: center;
            padding: 2rem 0;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            margin-bottom: 2rem;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .main-title {
            font-size: 3.5rem;
            font-weight: 700;
            color: white;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            margin-bottom: 0.5rem;
        }

        .subtitle {
            font-size: 1.3rem;
            color: rgba(255, 255, 255, 0.9);
            font-weight: 300;
        }

        /* Upload area styling */
        .upload-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 2rem;
            text-align: center;
            margin: 2rem 0;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            color: #333;
            border: 3px dashed #667eea;
            transition: all 0.3s ease;
        }

        .upload-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 50px rgba(0,0,0,0.15);
        }

        /* Result card styling */
        .result-card {
            background: linear-gradient(145deg, #ffffff, #f0f0f0);
            border-radius: 20px;
            padding: 2rem;
            margin: 1rem 0;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            border: 1px solid rgba(255,255,255,0.3);
            color: #333;
        }

        .prediction-text {
            font-size: 1.8rem;
            font-weight: 600;
            color: #2e7d32;
            text-align: center;
            margin: 1rem 0;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }

        .confidence-text {
            font-size: 1.4rem;
            color: #1565c0;
            text-align: center;
            margin-bottom: 1rem;
        }

        /* Success message styling */
        .success-message {
            background: linear-gradient(135deg, #4caf50, #45a049);
            color: white;
            padding: 1rem;
            border-radius: 10px;
            text-align: center;
            margin: 1rem 0;
            font-size: 1.1rem;
            font-weight: 500;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

        /* Hide Streamlit branding */
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        header {visibility: hidden;}

        /* Progress bar styling */
        .stProgress > div > div > div > div {
            background: linear-gradient(90deg, #4caf50, #45a049);
        }

        /* Button styling */
        .stButton > button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 0.5rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .stButton > button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }

        /* File uploader styling */
        .uploadedFile {
            border-radius: 10px !important;
        }
    </style>
    """, unsafe_allow_html=True)


def render_header():
    """Render the application header"""
    st.markdown("""
    <div class="title-container">
        <h1 class="main-title">🚦 AI Traffic Sign Recognition</h1>
        <p class="subtitle">Upload any traffic sign image and discover what it means with 99.91% accuracy!</p>
    </div>
    """, unsafe_allow_html=True)


def render_upload_section():
    """Render the file upload section"""
    st.markdown("""
    <div class="upload-container">
        <h2>📸 Upload Your Traffic Sign Image</h2>
        <p>Drag and drop an image or click to browse</p>
    </div>
    """, unsafe_allow_html=True)


def render_success_message():
    """Render model loading success message"""
    st.markdown("""
    <div class="success-message">
        ✅ AI Model loaded successfully! Ready to analyze traffic signs.
    </div>
    """, unsafe_allow_html=True)


def render_prediction_result(prediction, confidence):
    """
    Render prediction results in a beautiful card
    
    Args:
        prediction (str): Predicted class name
        confidence (float): Confidence score
    """
    st.markdown(f"""
    <div class="result-card">
        <h3 style="text-align: center; color: #2e7d32;">🎯 Prediction Result</h3>
        <div class="prediction-text">{prediction}</div>
        <div class="confidence-text">Confidence: {confidence:.1%}</div>
    </div>
    """, unsafe_allow_html=True)


def render_image_details(image):
    """
    Render image details in a card
    
    Args:
        image (PIL.Image): Uploaded image
    """
    st.markdown(f"""
    <div class="result-card">
        <h4>📋 Image Details</h4>
        <p><strong>Size:</strong> {image.size[0]} x {image.size[1]} pixels</p>
        <p><strong>Format:</strong> {image.format}</p>
        <p><strong>Mode:</strong> {image.mode}</p>
    </div>
    """, unsafe_allow_html=True)


def render_top_predictions(predictions):
    """
    Render top predictions with progress bars
    
    Args:
        predictions (list): List of tuples (class_name, probability)
    """
    for i, (class_name, probability) in enumerate(predictions):
        st.markdown(f"""
        <div style="margin: 0.5rem 0;">
            <strong>{i + 1}. {class_name}</strong>
            <div style="background: #f0f0f0; border-radius: 10px; overflow: hidden; margin-top: 5px;">
                <div style="background: linear-gradient(90deg, #667eea, #764ba2); 
                            width: {probability * 100}%; height: 20px; 
                            display: flex; align-items: center; justify-content: center; 
                            color: white; font-size: 12px; font-weight: bold;">
                    {probability:.1%}
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)


def render_stats_section():
    """Render performance statistics"""
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown("""
        <div class="result-card" style="text-align: center;">
            <h3>🎯</h3>
            <h4>99.91%</h4>
            <p>Accuracy</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div class="result-card" style="text-align: center;">
            <h3>🧠</h3>
            <h4>ResNet-18</h4>
            <p>AI Model</p>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown("""
        <div class="result-card" style="text-align: center;">
            <h3>🚦</h3>
            <h4>43</h4>
            <p>Sign Types</p>
        </div>
        """, unsafe_allow_html=True)

    with col4:
        st.markdown("""
        <div class="result-card" style="text-align: center;">
            <h3>⚡</h3>
            <h4>< 1s</h4>
            <p>Response Time</p>
        </div>
        """, unsafe_allow_html=True)


def render_instructions():
    """Render usage instructions"""
    st.markdown("""
    <div class="result-card">
        <h3>💡 How to get the best results:</h3>
        <ul>
            <li>📸 Use clear, well-lit images</li>
            <li>🎯 Ensure the traffic sign is the main subject</li>
            <li>📐 Square or rectangular images work best</li>
            <li>🔍 Higher resolution images give better accuracy</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)


def get_confidence_message(confidence):
    """
    Get confidence interpretation message
    
    Args:
        confidence (float): Confidence score
        
    Returns:
        tuple: (message_type, message_text)
    """
    if confidence > 0.9:
        return "success", "🔥 Excellent! Very confident prediction"
    elif confidence > 0.7:
        return "info", "✅ Good! Confident prediction"
    else:
        return "warning", "⚠️ Moderate confidence - image might be unclear"
